	DECLARE
	
	LIL NUMBER;
	LBL NUMBER;
	NOMB VARCHAR2(60);
	LIMITE NUMBER;
	DUMMY VARCHAR2(30);
	
	OWNER NUMBER;
	NEXT_DIRECT_ID NUMBER;
	REST VARCHAR2(60);
	CD_BAND NUMBER;
	DIRECT_NAME VARCHAR(60);
	ARCHIVO_ID NUMBER;
	REST_COM VARCHAR2(60);
	BAND_DIR NUMBER;
	BAND_FILE NUMBER;
	MOVE_MEN VARCHAR2(60);
	MOVE_SOURCE VARCHAR2(60);
	MOVE_DEST VARCHAR2(60);
	
BEGIN
	
	IF 	:CONSOL.CONSOL = '' OR :CONSOL.CONSOL IS NULL THEN
		:CONSOL.CONSOL := :CONSOL.CONSOL || :CONSOL.COMMAND;	
	ELSE
		:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || :CONSOL.COMMAND;	
	END IF;
	
	LIMITE := LENGTH(:CONSOL.COMMAND);
	REST := SUBSTR(:CONSOL.COMMAND,7,LENGTH(:CONSOL.COMMAND));
	

	BEGIN
		
		IF :CONSOL.COMMAND = 'clr' THEN
		clear_block(no_validate);
		
		----------INICIA mkdir
		ELSIF SUBSTR(:CONSOL.COMMAND,1,6) = 'mkdir ' 
			AND REST IS NOT NULL THEN
			
			BEGIN
				SELECT MIN(INODE_ID)
				INTO LIL
				FROM DUMMY_INODES
				WHERE STATUS_INODE = 0;
				
				EXCEPTION
				WHEN NO_DATA_FOUND THEN
				:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No hay INODES disponibles';
			END;
			
			BEGIN	
				SELECT MIN(BLOCK_ID)
				INTO LBL
				FROM DUMMY_BLOCKS
				WHERE STATUS_BLOCK = 0;
					
				EXCEPTION
				WHEN NO_DATA_FOUND THEN
				:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No hay BLOQUES disponibles';
			END;
			
			IF :global.ACTUAL_DIRECTORY = 2 THEN
				OWNER := 1;
			ELSE
				SELECT PROPIETARIO
				INTO OWNER
				FROM DUMMY_DIRECTORY
				WHERE PROPIETARIO = :global.US_ID
				AND DIRECTORY_ID = :global.ACTUAL_DIRECTORY;
			END IF;
			
			BEGIN
					SELECT DIRECTORY_ID
					INTO BAND_DIR
					FROM DUMMY_DIRECTORY
					WHERE FATHER_DIRECTORY = :global.US_ID
					AND DIRECTORY_NAME = SUBSTR(:CONSOL.COMMAND,7,LENGTH(:CONSOL.COMMAND));
					
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
				BAND_DIR := 0;
			END;
			
				
			IF BAND_DIR = 0 THEN
				IF LIL > 100 THEN
						:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No hay INODES disponibles';
				ELSIF LBL > 250 THEN
					:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No hay BLOCKES disponibles';
				ELSIF :global.ACTUAL_DIRECTORY = 2 OR OWNER = :GLOBAL.US_ID THEN
					NOMB := SUBSTR(:CONSOL.COMMAND,7,LENGTH(:CONSOL.COMMAND));
					
					SELECT MAX(DIRECTORY_ID) +1
					INTO NEXT_DIRECT_ID
					FROM DUMMY_DIRECTORY;
					
					UPDATE DUMMY_INODES
					SET TIPO = 'DIRECTORY', FECHA = SYSDATE, PROPIETARIO = :global.US_ID, STATUS_INODE = 1
					WHERE INODE_ID = LIL;
					
					UPDATE DUMMY_BLOCKS
					SET STATUS_BLOCK = 1 --agregar propietario
					WHERE BLOCK_ID = LBL;
					
					INSERT INTO DUMMY_DIRECTORY
					VALUES (NEXT_DIRECT_ID, SUBSTR(:CONSOL.COMMAND,7,LENGTH(:CONSOL.COMMAND)), LIL, LBL, :global.ACTUAL_DIRECTORY, :global.US_ID);
					
					COMMIT;
					
					:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'Directorio ' || SUBSTR(:CONSOL.COMMAND,7,LENGTH(:CONSOL.COMMAND)) || ' creado';
					
					
				ELSE 
					:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No tienes privilegio para crear un directorio aquí ';
					
				END IF;
			ELSE
						:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'Ya existe un archivo con ese nombre';
			END IF;
			----------TERMINA mkdir
		
		
		
		
			----------INICIA touch
		ELSIF SUBSTR(:CONSOL.COMMAND,1,6) = 'touch ' 
			AND REST IS NOT NULL THEN
			
			BEGIN
				SELECT MIN(INODE_ID)
				INTO LIL
				FROM DUMMY_INODES
				WHERE STATUS_INODE = 0;
				
				EXCEPTION
				WHEN NO_DATA_FOUND THEN
				:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No hay INODES disponibles';
			END;
			
			BEGIN	
				SELECT MIN(BLOCK_ID)
				INTO LBL
				FROM DUMMY_BLOCKS
				WHERE STATUS_BLOCK = 0;
					
				EXCEPTION
				WHEN NO_DATA_FOUND THEN
				:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No hay BLOQUES disponibles';
			END;
				
			IF :global.ACTUAL_DIRECTORY = 2 THEN
				OWNER := 1;
			ELSE
				SELECT PROPIETARIO
				INTO OWNER
				FROM DUMMY_DIRECTORY
				WHERE PROPIETARIO = :global.US_ID
				AND DIRECTORY_ID = :global.ACTUAL_DIRECTORY;
			END IF;
			
			BEGIN
					SELECT FILE_ID
						INTO BAND_FILE
						FROM DUMMY_FILES
						WHERE DIRECTORY_ID = :global.US_ID
						AND FILE_NAME = SUBSTR(:CONSOL.COMMAND,7,LENGTH(:CONSOL.COMMAND));
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
				BAND_FILE := 0;
	    END;
			
			IF BAND_FILE = 0 THEN
				IF LIL > 100 THEN
						:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No hay INODES disponibles';
				ELSIF LBL > 250 THEN
					:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No hay BLOCKES disponibles';
				ELSIF :global.ACTUAL_DIRECTORY = 2 OR OWNER = :GLOBAL.US_ID THEN
					NOMB := SUBSTR(:CONSOL.COMMAND,7,LENGTH(:CONSOL.COMMAND));
					
					BEGIN
						SELECT MAX(FILE_ID) + 1
						INTO ARCHIVO_ID
						FROM DUMMY_FILES;
						
						IF ARCHIVO_ID IS NULL OR ARCHIVO_ID = '' THEN
							ARCHIVO_ID := 1;
						END IF;
						
					EXCEPTION
						WHEN NO_DATA_FOUND THEN
						ARCHIVO_ID := 1;
					END;
					
					UPDATE DUMMY_INODES
					SET TIPO = 'DIRECTORY', FECHA = SYSDATE, PROPIETARIO = :global.US_ID, STATUS_INODE = 1
					WHERE INODE_ID = LIL;
					
					UPDATE DUMMY_BLOCKS
					SET STATUS_BLOCK = 1--agregar propietario
					WHERE BLOCK_ID = LBL;
					
					
					INSERT INTO DUMMY_FILES 
					VALUES(ARCHIVO_ID, NOMB, :global.ACTUAL_DIRECTORY, LIL, LBL, :global.US_ID);
					
					COMMIT;
					
					:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'Archivo ' || SUBSTR(:CONSOL.COMMAND,7,LENGTH(:CONSOL.COMMAND)) || ' creado';
					
					
				ELSE 
					:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No tienes privilegio para crear un archivo aquí ';
					
				END IF;
			ELSE
					:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'Ys existe el archivo';
			END IF;
			----------TERMINA touch
		
		
			
			
			
		
		----------INICIA cd
		ELSIF SUBSTR(:CONSOL.COMMAND,1,3) = 'cd ' 
				AND SUBSTR(:CONSOL.COMMAND,4,LENGTH(:CONSOL.COMMAND)) IS NOT NULL THEN
			
			REST_COM := SUBSTR(:CONSOL.COMMAND,4,LENGTH(:CONSOL.COMMAND));
			
			CD_BAND := 0;
			
			IF :global.ACTUAL_DIRECTORY = 2 THEN
			
				BEGIN
					SELECT DIRECTORY_ID
					INTO :global.ACTUAL_DIRECTORY
					FROM DUMMY_DIRECTORY
					WHERE FATHER_DIRECTORY = 2
					AND DIRECTORY_NAME = SUBSTR(:CONSOL.COMMAND,4,LENGTH(:CONSOL.COMMAND));
					
					
					EXCEPTION
					WHEN NO_DATA_FOUND THEN
					:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No existe el directorio';
					CD_BAND := 1;
	
					END;
					
			ELSE
				BEGIN
					SELECT DIRECTORY_ID
					INTO :global.ACTUAL_DIRECTORY
					FROM DUMMY_DIRECTORY
					WHERE FATHER_DIRECTORY = :global.ACTUAL_DIRECTORY
					AND DIRECTORY_NAME = SUBSTR(:CONSOL.COMMAND,4,LENGTH(:CONSOL.COMMAND));
					
					
					EXCEPTION
					WHEN NO_DATA_FOUND THEN
					:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No existe el directorio';
					CD_BAND := 1;
	
				END;
			END IF;
		
			IF CD_BAND = 0 THEN
				:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || :global.US_NAME || '@' || :global.US_NAME || SUBSTR(:CONSOL.COMMAND,4,LENGTH(:CONSOL.COMMAND));
			END IF;	
		----------TERMINA cd
			
		----------INICIA cd..
		ELSIF SUBSTR(:CONSOL.COMMAND,1,4) = 'cd..'
			AND SUBSTR(:CONSOL.COMMAND,5,LENGTH(:CONSOL.COMMAND)) IS NULL THEN
			
			CD_BAND := 0;
			
			IF :global.ACTUAL_DIRECTORY <= 2 THEN
				:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No puedes retroceder más';
				
			ELSE
			BEGIN
				SELECT FATHER_DIRECTORY
					INTO :global.ACTUAL_DIRECTORY
					FROM DUMMY_DIRECTORY
					WHERE DIRECTORY_ID = :global.ACTUAL_DIRECTORY;

					EXCEPTION
					WHEN NO_DATA_FOUND THEN
					:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No existe el directorio';
					CD_BAND := 1;
	
				END;
				
				IF CD_BAND = 0 THEN
					:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || :global.US_NAME || '@' || :global.US_NAME || SUBSTR(:CONSOL.COMMAND,5,LENGTH(:CONSOL.COMMAND));
				END IF;
			END IF;
		----------TERMINA cd..
		
		
			--inicia rmdir
			--eliminar directorio
		ELSIF SUBSTR(:CONSOL.COMMAND,1,6) = 'rmdir '
		AND SUBSTR(:CONSOL.COMMAND,7,LENGTH(:CONSOL.COMMAND)) IS NOT NULL THEN
		
			BEGIN
					SELECT DIRECTORY_ID
					INTO BAND_DIR
					FROM DUMMY_DIRECTORY
					WHERE FATHER_DIRECTORY = :global.ACTUAL_DIRECTORY
					AND DIRECTORY_NAME = SUBSTR(:CONSOL.COMMAND,7,LENGTH(:CONSOL.COMMAND))
					AND PROPIETARIO = :global.US_ID;
					
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
				BAND_DIR := 0;
			END;
			
			IF BAND_DIR = 0 THEN
				:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No existe un archivo con ese nombre';
			ELSE
				
				SELECT BLOCK_NUMBER 
				INTO LBL
				FROM DUMMY_DIRECTORY WHERE DIRECTORY_ID = BAND_DIR;
				
				SELECT INODE_ID 
				INTO LIL
				FROM DUMMY_DIRECTORY WHERE DIRECTORY_ID = BAND_DIR;

				UPDATE DUMMY_BLOCKS
					SET STATUS_BLOCK = 0--agregar propietario
					WHERE BLOCK_ID = LBL;
					
					UPDATE DUMMY_INODES
					SET TIPO = NULL, FECHA = NULL, PROPIETARIO = NULL, STATUS_INODE = 0
					WHERE INODE_ID = LIL;
				
				DELETE DUMMY_DIRECTORY
				WHERE DIRECTORY_ID = BAND_DIR;
				
				COMMIT;

				
				:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'Carpeta ' || SUBSTR(:CONSOL.COMMAND,7,LENGTH(:CONSOL.COMMAND)) || ' eliminada';
				
			END IF;
	
		--termina rmdir
			
			
			
		--inicia rm
		--eliminar archivo
		
		ELSIF SUBSTR(:CONSOL.COMMAND,1,3) = 'rm '
		AND SUBSTR(:CONSOL.COMMAND,4,LENGTH(:CONSOL.COMMAND)) IS NOT NULL THEN
		
			BEGIN
					
					SELECT FILE_ID
					INTO BAND_FILE
					FROM DUMMY_FILES
					WHERE DIRECTORY_ID = :global.ACTUAL_DIRECTORY
					AND FILE_NAME = SUBSTR(:CONSOL.COMMAND,4,LENGTH(:CONSOL.COMMAND))
					AND PROPIETARIO = :global.US_ID;
					
			EXCEPTION
				WHEN NO_DATA_FOUND THEN
				BAND_DIR := 0;
			END;
			
			IF BAND_FILE = 0 THEN
				:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'No existe un archivo con ese nombre';
			ELSE
				
				SELECT BLOCK_ID 
				INTO LBL
				FROM DUMMY_FILES WHERE FILE_ID = BAND_FILE;
				
				SELECT INODE_ID 
				INTO LIL
				FROM DUMMY_FILES WHERE FILE_ID = BAND_FILE;

				UPDATE DUMMY_BLOCKS
					SET STATUS_BLOCK = 0--agregar propietario
					WHERE BLOCK_ID = LBL;
					
					UPDATE DUMMY_INODES
					SET TIPO = NULL, FECHA = NULL, PROPIETARIO = NULL, STATUS_INODE = 0
					WHERE INODE_ID = LIL;
				
				DELETE DUMMY_FILES
				WHERE FILE_ID = BAND_FILE;
				
				COMMIT;

				
				:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) || 'Archivo ' || SUBSTR(:CONSOL.COMMAND,4,LENGTH(:CONSOL.COMMAND)) || ' eliminado';
				
			END IF;
		
		--termina rm
			
		
		--inicia mover directorio
		--move <source> <destination>
		ELSIF SUBSTR(:CONSOL.COMMAND,1,5) = 'move '
		AND SUBSTR(:CONSOL.COMMAND,6,LENGTH(:CONSOL.COMMAND)) IS NOT NULL THEN
		
		MOVE_MEN := SUBSTR(:CONSOL.COMMAND,6,LENGTH(:CONSOL.COMMAND));
		
		MOVE_SOURCE := SUBSTR(MOVE_MEN,1,INSTR(MOVE_MEN, ' ')-1);
		MOVE_DEST := SUBSTR(MOVE_MEN,INSTR(MOVE_MEN, ' ')+1,LENGTH(MOVE_MEN));	
		
		--termina mover directorio
	
	
		
		ELSE
			:CONSOL.CONSOL := :CONSOL.CONSOL || CHR(10) ||'Comando no reconocido.';
			
		END IF;
		
		
		
	END;
	
	
	:CONSOL.COMMAND := NULL;

END;
